//////////////////////////////////////////////////////////////////////////////////////


AHO Algorithm

const int mx=26;//len of Alpha
struct node
{
    node * ch[mx];
    node * fail;
    vector<int> pat_idx;
    node()
    {
        memset(ch,0,sizeof ch);
        fail = NULL;
    }
}* root;

void init()
{
    root = new node();
}

void insert(string &s , int idx)// insert strings from  set
{
    node * cur = root;

    for(int i=0; i<s.size(); i++)
    {
        int c = s[i]-'a';
        if (cur->ch[c] == NULL) cur->ch[c] = new node();
        cur = cur->ch[c];
    }
    cur->pat_idx.push_back(idx);
}

node* get(node *k , int c)
{
    while(k->ch[c] == NULL)
        k = k->fail;
    k = k->ch[c];
    return k;
}

void buildAho()// o(mx*(sum[size of si]));
{
    queue <node*> q;
    for ( int i = 0  ; i < mx; i++)
    {
        if( root->ch[i])
            q.push(root->ch[i]);
        else
            root->ch[i] = new node();
        root->ch[i]->fail = root;
    }
    while(!q.empty())
    {
        node* cur = q.front();
        q.pop();
        for ( int i = 0 ; i < mx ; i++)
        {
            if(cur->ch[i])
            {
                node*fail = cur->fail;

                fail = get(fail,i);

                cur->ch[i]->fail = fail;

                q.push(cur->ch[i]);

                for ( auto &j : fail->pat_idx)
                    cur->ch[i]->pat_idx.push_back(j);
            }
        }
    }
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


// to get the number of occ for each si


void func(int index){
    string str;cin>>str;
    ll k;cin>>k;
    init();
    vector<int>dp(k);
    for (int i = 0; i < k; ++i) {
        string s;cin>>s;
        insert(s,i);
    }
    buildAho();
    auto cur=root;
    for (int i = 0; i < str.size(); ++i) {
        cur=get(cur,str[i]-'a');
        for (auto item:cur->pat_idx) {
            dp[item]++;
        }
    }
    for (auto item:dp) {
        cout<<item<<'\n';
    }
}



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


// Finding the lexicographically smallest string of a given length that doesn't match any given strings

const int mx=26;//len of Alpha
struct node
{
    node * ch[mx];
    node * fail;
    bool outPut;
    bool can[mx];
    node()
    {
        ::memset(can,1,sizeof can);
        memset(ch,0,sizeof ch);
        fail = NULL;
        outPut=0;
    }

}* root;

void init()
{
    root = new node();
}

void insert(string &s , int idx)// insert strings from  set
{
    node * cur = root;

    for(int i=0; i<s.size(); i++)
    {
        int c = s[i]-'a';
        if (cur->ch[c] == NULL) cur->ch[c] = new node();
        if(i==s.size()-1){
            cur->can[c]=0;
        }
        cur = cur->ch[c];
    }
    cur->outPut=1;
}

node* get(node *k , int c)
{
    while(k->ch[c] == NULL)
        k = k->fail;
    k = k->ch[c];
    return k;
}

void buildAho()// o(mx*(sum[size of si]));
{
    queue <node*> q;
    for ( int i = 0  ; i < mx; i++)
    {
        if( root->ch[i])
            q.push(root->ch[i]);
        else
            root->ch[i] = new node();
        root->ch[i]->fail = root;
    }
    while(!q.empty())
    {
        node* cur = q.front();
        q.pop();
        for ( int i = 0 ; i < mx ; i++)
        {
            if(cur->ch[i])
            {
                node*fail = cur->fail;
                fail = get(fail,i);
                cur->ch[i]->fail = fail;
                q.push(cur->ch[i]);
                if(fail->outPut)
                    cur->can[i]=0;
            }
        }
    }
}
string res="";
void dfs(node* c,int len){
    if(len==0)return;
    for (int i = 0; i < mx; ++i) {
        if(c->can[i]){
            c= get(c,i);
            res+=(char) 'a'+i;
            dfs(c,len-1);
            return;
        }
    }
}
void func(int index){
    ll len;cin>>len; // length of all strings
    ll k;cin>>k;
    init();
    ll counter=0;
    for (int i = 0; i < k; ++i) {
        string s;cin>>s;
        insert(s,i);
    }
    buildAho();
    auto cur=root;
    dfs(cur,len);
    cout<<res<<endl;
}



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


// Finding the shortest string containing all given strings

O(alpha * summtion of stirngs len * 2^k) as k number of strings
const int mx=26;//len of Alpha
int totalIndex=1;
ll k;
vector<vector<pair<int,int>>>par,dp;
struct node
{
    node * ch[mx];
    node * fail;
    int mask=0;
    int index=0;
    node()
    {
        memset(ch,0,sizeof ch);
        fail = NULL;
        index=totalIndex++;
    }
}* root;

void init()
{
    root = new node();
}

void insert(string &s , int idx)// insert strings from  set
{
    node * cur = root;

    for(int i=0; i<s.size(); i++)
    {
        int c = s[i]-'a';
        if (cur->ch[c] == NULL) cur->ch[c] = new node();
        cur = cur->ch[c];
    }
    cur->mask|=1ll<<idx;
}

node* get(node *k , int c)
{
    node* kk=k;
    while(kk->ch[c] == NULL)
        kk = kk->fail;
    kk = kk->ch[c];
    return kk;
}

void buildAho()// o(mx*(sum[size of si]));
{
    queue <node*> q;
    for ( int i = 0  ; i < mx; i++)
    {
        if( root->ch[i])
            q.push(root->ch[i]);
        else
            root->ch[i] = new node();
        root->ch[i]->fail = root;
    }
    while(!q.empty())
    {
        node* cur = q.front();
        q.pop();
        for ( int i = 0 ; i < mx ; i++)
        {
            if(cur->ch[i])
            {
                node*fail = cur->fail;
                fail = get(fail,i);
                cur->ch[i]->fail = fail;
                q.push(cur->ch[i]);

                cur->ch[i]->mask|=fail->mask;
            }
        }
    }
}


struct edge{
    node* node;
    int mask,len;
};

pair<int,int> bfs(){
    auto cur=root;
    queue<edge>q;
    q.push({cur,0,0});
    dp.resize(totalIndex+10);
    par.resize(totalIndex+10);
    par.assign(par.size(),vector<pair<int,int>>(1<<13,{0,0}));
    dp.assign(par.size(),vector<pair<int,int>>(1<<13,{-1,-1}));
    dp[cur->index][0]= make_pair(0ll,0ll);
    par[cur->index][0]=make_pair(-1ll,-1ll);
    while (q.size()){
        auto [myNode,mask,len]=q.front();
        q.pop();
        for (int i = 0; i < mx; ++i) {
            node* curNode= get(myNode,i);
            int newMask=mask|curNode->mask;
            if(dp[curNode->index][newMask].first==-1){
                dp[curNode->index][newMask]={dp[myNode->index][mask].first+1,mask};
                q.push({curNode,newMask,dp[curNode->index][mask].first});
                par[curNode->index][newMask]={myNode->index,i};
                if(newMask==1){
                    cout<<"";
                }
                if(k==(newMask)){
                    return make_pair(curNode->index,newMask);
                }
            }
        }
    }
}
string result="";
void create_str(int idx,int mask,int ch){
    while (idx!=-1&&dp[idx][mask].first!=-1){
        if(ch!=-1)
            result+=char(ch+'a');
        auto temp1=par[idx][mask].first,tem2=dp[idx][mask].second,temp3=par[idx][mask].second;

        idx=temp1,mask=tem2,ch=temp3;
    }
}
string shortestSuperstring(vector<string>& words) {
    init();
    k=(1<<words.size())-1;
    for (int i = 0; i < words.size(); ++i) {
        insert(words[i],i);
    }
    buildAho();
    auto item=bfs();
    create_str(item.first,item.second,-1);
    std::reverse(result.begin(), result.end());
    return result;
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


// Finding the lexicographically smallest string of length â€Šl and k strings from set


string res="";
bool dfs(node* c,int len,int k){
    if(len==0){
        return k==0;// we can change the constrain here due to the problem
    }
    for (int i = 0; i < mx; ++i) {
        auto temp=c;
        temp= get(temp,i);
        int counter=0;
        for (auto item:temp->pat_idx) {
            counter++;
        }
        if(dfs(temp,len-1,k-counter)){
            res+='a'+i;
            return true;
        }
    }
    return 0;
}
void func(int index){
    ll len;cin>>len; // length of all strings
    ll k;cin>>k;
    init();
    ll counter=0;
    for (int i = 0; i < k; ++i) {
        string s;cin>>s;
        insert(s,i);
    }
    buildAho();
    auto cur=root;
    dfs(cur,len,k);
    reverse(res.begin(),res.end());
    cout<<res<<endl;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Dynamic AHO to Delete and add at run time 


int sqr=0;
const int mx=26;//len of Alpha

struct AHO{
    struct node
    {
        node * ch[mx];
        node * fail;
        int pat_idx;
//        vector<int> pat_idx;
        node()
        {
            memset(ch,0,sizeof ch);
            fail = NULL;
            pat_idx=0;
        }
    }* root;

    void init()
    {
        root = new node();
    }

    void insert(string &s , int idx)// insert strings from  set
    {
        node * cur = root;

        for(int i=0; i<s.size(); i++)
        {
            int c = s[i]-'a';
            if (cur->ch[c] == NULL) cur->ch[c] = new node();
            cur = cur->ch[c];
        }
        cur->pat_idx++;
    }

    node* get(node *k , int c)
    {
        while(k->ch[c] == NULL)
            k = k->fail;
        k = k->ch[c];
        return k;
    }

    void buildAho()// o(mx*(sum[size of si]));
    {
        queue <node*> q;
        for ( int i = 0  ; i < mx; i++)
        {
            if( root->ch[i])
                q.push(root->ch[i]);
            else
                root->ch[i] = new node();
            root->ch[i]->fail = root;
        }
        while(!q.empty())
        {
            node* cur = q.front();
            q.pop();
            for ( int i = 0 ; i < mx ; i++)
            {
                if(cur->ch[i])
                {
                    node*fail = cur->fail;

                    fail = get(fail,i);

                    cur->ch[i]->fail = fail;

                    q.push(cur->ch[i]);
                    cur->ch[i]->pat_idx+=fail->pat_idx;
//                    for ( auto &j : fail->pat_idx)
//                        cur->ch[i]->pat_idx.push_back(j);
                }
            }
        }
    }
    ll count(string&str){
        ll res=0;
        auto item=root;
        for (int i = 0; i < str.size(); ++i) {
            item= get(item,str[i]-'a');
            res+=item->pat_idx;
        }
        return res;
    }
};
vector<int>up(600),del(N,1),emp(N,1);
map<string,int>ma;
vector<string>vs(N);
AHO aho[600];
bool solve(int idx){
    if(up[idx]==0)return 0;
    ll sum=0;
    vector<string>v;
    for (int i = idx*sqr; i < (idx+1)*sqr ; ++i) {
        if(i>=del.size())break;
        if(del[i]==0){
            v.push_back(vs[i]);
            sum=1;
        }
    }
    if(sum==0){
        if(emp[idx]==0){
            delete(aho[idx].root);
        }
        emp[idx]=1;
        return 1;
    }
    emp[idx]=0;
    aho[idx].init();
    ll id=0;
    for (auto item:v) {
        aho[idx].insert(item,id++);
    }
    aho[idx].buildAho();
    up[idx]=0;
    return 0;
}
void func(int index){
    ll q;cin>>q;
    sqr= sqrtl(q)+1;
    for (int i = 0; i < q; ++i) {
        ll t;
        cin>>t>>vs[i];
        ll sz=vs[i].size();
        if(t==1){
            ma[vs[i]]=i;
            up[i/sqr]=1;
            del[i]=0;
        }else if(t==2){
            int idx=ma[vs[i]];
            del[idx]=1;
            up[idx/sqr]=1;
        }else{
            ll ans=0;
            for (int j = 0; j < sqr; ++j) {
                solve(j);
                if(emp[j]){
                    continue;
                }
                ans+=aho[j].count(vs[i]);
            }
            cout<<ans<<'\n';
            cout.flush();
        }
    }
}