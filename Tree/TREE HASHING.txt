#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace std;
using namespace __gnu_pbds;

//#pragma GCC optimize("Ofast,no-stack-protector")
//#pragma GCC optimize("unroll-loops")
//#pragma GCC optimize("fast-math")
//#pragma GCC target("popcnt") ////// to help in bitset

#define clr(v, d)			memset(v, d, sizeof(v))
#define ll long long
#define int long long
typedef tree< int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;
#define setP(item) cout<<fixed<<setprecision(item);
int ceilSqrt(int a){
    return ::ceil(sqrtl(a));
}
int  divC(int a,int b){
    return a/b+(a%b!=0);
}
int gcd(int a, int b) { return ((b == 0) ? a : gcd(b, a % b)); }
int lcm(int a,int b){return (a*b)/gcd(a,b);}
const ll OO =1e18, mod = 1e9+7,mod2=1e9+9,  N=2e5+10,M=25,MOD= 998244353, minOO=LLONG_MIN;
const double EPS=1e-10;
const double PI=acos(-1);
const ll maximum=2000+10;

///   هذا الحل من وحي خيال المؤلف واي تشابه بينه و بين اي حل اخر ما هو الا محض الصدفة
vector<int> prime={200003,200009,200017,200023,200029};
vector<int>  pw(N);
vector<int> inv(N);
vector<int>  pw2(N);
vector<int> inv2(N);
ll add(ll a, ll b,ll mod) {
    return ((a % mod + b % mod) + mod) % mod;
}

ll mul(ll a, ll b,ll mod) {
    return ((a % mod * b % mod) + mod) % mod;
}

ll minu(ll a, ll b,ll mod) {
    return ((a % mod - b % mod) + mod) % mod;
}

ll fastp(ll a, ll b,ll mod) {
    if (b == 0)return (1);
    ll temp = fastp(a, b / 2,mod);
    ll total = mul(temp, temp,mod);
    if (b % 2 == 1) {
        total = mul(total, a,mod);
    }
    return total;
}
void pre() {
    pw[0] = 1;
    inv[0] = 1;
    pw2[0] = 1;
    inv2[0] = 1;
    ll mul_inv = fastp(200003, mod - 2,mod);
    ll mul_inv2=fastp(200009, mod2 - 2,mod2);
    for (int i = 1; i < N; ++i) {
        pw[i] = mul(pw[i - 1], 200003,mod);
        inv[i] = mul(inv[i - 1], mul_inv,mod);
        pw2[i] = mul(pw2[i - 1], 200009,mod2);
        inv2[i] = mul(inv2[i - 1], mul_inv2,mod2);
    }
}
void func(int index) {
    pre();
    ll n,m;cin>>n>>m;
    string s,t;cin>>s>>t;
    map<char,int>last;
    pair<int,int> res={0,0};
    for (int i = 0; i < m; ++i) {
        ll val=0;
        if(last.count(t[i])){
            val=i-last[t[i]];
        }
        res.first= add(res.first, mul(val,pw[i],mod),mod);
        res.second= add(res.second, mul(val,pw2[i],mod2),mod2);
        last[t[i]]=i;
    }
    last.clear();
    pair<int,int>res2={0,0};
    map<char,int>nxt;
    for (int i = 0; i < m; ++i) {
        ll val=0;
        if(last.count(s[i])){
            nxt[last[s[i]]]=i;
            val=i-last[s[i]];
        }
        res2.first= add(res2.first, mul(val,pw[i],mod),mod);
        res2.second= add(res2.second, mul(val,pw2[i],mod2),mod2);
        last[s[i]]=i;
    }
    vector<int>ans;
    if(res==res2){
        ans.push_back(0);
    }
    for (int i = 0; i+m < s.size() ; ++i) {
        char nextChar=s[i+m];
        ll next=0;
        if(nxt.count(i)){
            next=nxt[i]-i;
            nxt.erase(i);
        }
        res2.first= minu(res2.first, mul(next,pw[next],mod),mod);
        res2.second= minu(res2.second, mul(next,pw2[next],mod2),mod2);
        if(last[s[i]]==i)
            last.erase(s[i]);
        res2.first= mul(res2.first,inv[1],mod);
        res2.second= mul(res2.second,inv2[1],mod2);
        ll val=0;
        if(last.count(nextChar)){
            nxt[last[nextChar]]=i+m;
            val=i+m-last[nextChar];
        }
        res2.first= add(res2.first, mul(val,pw[m-1],mod),mod);
        res2.second= add(res2.second, mul(val,pw2[m-1],mod2),mod2);
        last[s[i+m]]=i+m;
        if(res==res2){
            ans.push_back(i+1);
        }
    }
    cout<<ans.size()<<endl;
    for (int i = 0; i < ans.size(); ++i) {
        cout<<ans[i]+1<<' ';
    }
}
signed main() {
//    freopen("lcm.in","rt",stdin);
    //freopen("output.txt","wt",stdout);
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
    ll t=1;
//    cin>>t;
    ll index=1;
    while (t--){
        func(index++);
    }
    return 0;
}