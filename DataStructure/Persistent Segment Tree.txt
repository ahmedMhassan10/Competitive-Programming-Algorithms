
int n, q;
int arr[N];
pair<int, int> child[N*2*M];//contain the left and right pointer of some node (M is log value)
int seg[N*2*M];
int root[N*2]; // contain pointer that point ot root of current component
int ptr=0, list_size=0;

ll Build(ll l,ll r){
    ++ptr;
    ll id=ptr;
    if(l==r){
        seg[id]=arr[l];
        return id;
    }
    ll mid=(l+r)/2;
    child[id].first=Build(l,mid);
    child[id].second=Build(mid+1,r);
    seg[id]=seg[child[id].first]+seg[child[id].second];
    return id;
}

void update(int cur, int prev, int l, int r, int pos, int val) {
    if (l == r) {
        seg[cur] = val;
        return;
    }
    int mid = (l + r) / 2;
    if (pos <= mid) {
        child[cur].first = ++ptr;
        child[cur].second = child[prev].second;
        update(child[cur].first, child[prev].first, l, mid, pos, val);
    } else {
        child[cur].first = child[prev].first;
        child[cur].second = ++ptr;
        update(child[cur].second, child[prev].second, mid + 1, r, pos, val);
    }
    seg[cur] = seg[child[cur].first] + seg[child[cur].second];
}

void modify(int new_version, int prev_version, int pos, int val) {
    update(new_version, prev_version, 0, n - 1, pos, val);
}

int query(int node, int l, int r, int ql, int qr) {
    if (node == 0) return 0;
    if (l > qr || r < ql) return 0;
    if (l >= ql && r <= qr) return seg[node];

    int mid = (l + r) / 2;
    return query(child[node].first, l, mid, ql, qr) + query(child[node].second, mid + 1, r, ql, qr);
}

int query(int version, int l, int r) {
    return query(version, 0, n - 1, l, r);
}
void func(int index) {
    cin >> n >> q;
    for (int i = 0; i < n; i++) {
        cin >> arr[i];
//        int prev_root = root[1]; //use it if we need to build at run time
//        root[1] = ++ptr;
//        modify(root[1], prev_root, i, arr[i]);
    }
    root[1]= Build(0,n-1);
    list_size = 1;
    while (q--) {
        int type;
        cin >> type;
        if (type == 1) {
            int idx, k, x;
            cin >> k >> idx >> x;
            idx--;
            int new_root = ++ptr;
            modify(new_root, root[k], idx, x);
            root[k] = new_root;
        } else if (type == 2) {
            int k, l, r;
            cin >> k >> l >> r;
            l--, r--;
            cout << query(root[k], l, r) << "\n";
        } else {
            int k;
            cin >> k;
            root[++list_size] = root[k];
        }
    }
}

//////////////////////////////////////////////////////////////////////////////


// https://cp-algorithms.com/data_structures/segment_tree.html#finding-the-k-th-smallest-number-in-a-range


// problem to get kth smallest number in a range


Vertex* build(int tl, int tr) {
    if (tl == tr)
        return new Vertex(0);
    int tm = (tl + tr) / 2;
    return new Vertex(build(tl, tm), build(tm+1, tr));
}

Vertex* update(Vertex* v, int tl, int tr, int pos) {
    if (tl == tr)
        return new Vertex(v->sum+1);
    int tm = (tl + tr) / 2;
    if (pos <= tm)
        return new Vertex(update(v->l, tl, tm, pos), v->r);
    else
        return new Vertex(v->l, update(v->r, tm+1, tr, pos));
}

int find_kth(Vertex* vl, Vertex *vr, int tl, int tr, int k) {
    if (tl == tr)
        return tl;
    int tm = (tl + tr) / 2, left_count = vr->l->sum - vl->l->sum;
    if (left_count >= k)
        return find_kth(vl->l, vr->l, tl, tm, k);
    return find_kth(vl->r, vr->r, tm+1, tr, k-left_count);
}


///////////////////////////////////////////////////////////////////////////


https://codeforces.com/contest/1422/problem/F

#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

using namespace std;
using namespace __gnu_pbds;
#define ll long long
//#define int long long
#define clr(v, d)            memset(v, d, sizeof(v))
#define vi vector<int>
const ll OO = 3e18 + 10, mod = 1e9 + 7, mod2 = 1e9 + 9, N = 1e5 + 5, M = 25, MOD = 998244353, minOO = LLONG_MIN;

typedef tree<pair<int, int>, null_type, greater<pair<int, int>>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;

int divC(int a, int b) {
    return a / b + (a % b != 0);
}

int n, q;
int arr[N];
pair<int, int> child[N * 400];//contain the left and right pointer of some node (M is log value)
int seg[N * 400];
int root[N * 2]; // contain pointer that point ot root of current component
int ptr = 0;
vector<ll> primes(3 * N + 5, 1);

ll mul(ll a, ll b, ll mod) {
    return (1LL * a * b) % mod;
}

ll fop(ll b, ll p, ll mod) {
    if (!p)
        return 1;
    ll temp = fop(b, p / 2, mod) % mod;
    temp = mul(temp, temp, mod);
    if (p & 1)
        temp = mul(temp, b, mod);
    return temp % mod;
}

void seive() {
    for (int i = 2; i <= 3 * N; i++) {
        primes[i] = i;
    }
    primes[0] = 0;
    primes[1] = 0;
    for (ll i = 2; i * i <= 3 * N; i++) {
        if (primes[i] == i) {
            for (ll j = 2 * i; j <= 3 * N; j += i) {
                primes[j] = min(primes[j], i);
            }
        }
    }
}

ll Build(ll l, ll r) {
    ++ptr;
    ll id = ptr;
    if (l == r) {
        seg[id] = 1;
        return id;
    }
    ll mid = (l + r) / 2;
    child[id].first = Build(l, mid);
    child[id].second = Build(mid + 1, r);
    seg[id] = (1ll*seg[child[id].first] * seg[child[id].second])%mod;
    return id;
}

void update(int cur, int prev, int l, int r, int pos, int val) {
    seg[cur] = seg[prev];
    if (l == r) {
        seg[cur] = (1ll*seg[cur] * val)%mod;
        return;
    }
    int mid = (l + r) / 2;
    if (pos <= mid) {
        child[cur].first = ++ptr;
        child[cur].second = child[prev].second;
        update(child[cur].first, child[prev].first, l, mid, pos, val);
    } else {
        child[cur].first = child[prev].first;
        child[cur].second = ++ptr;
        update(child[cur].second, child[prev].second, mid + 1, r, pos, val);
    }
    seg[cur] = (1ll*seg[child[cur].first] * seg[child[cur].second])%mod;
}

void modify(int &prev_root, int prime, int &pos, int &prev_val, int val) {
    if (val == 0)
        return;
    prev_val += val;
    val = (val + mod-1) % (mod-1);
    ll new_version = ++ptr;
    update(new_version, prev_root, 0, n - 1, pos, fop(prime, val, mod));
    prev_root = new_version;
}

int query(int node, int l, int r, int ql, int qr) {
    if (node == 0) return 1;
    if (l > qr || r < ql) return 1;
    if (l >= ql && r <= qr) return seg[node];
    int mid = (l + r) / 2;
    return (1ll*query(child[node].first, l, mid, ql, qr)
            * query(child[node].second, mid + 1, r, ql, qr)) % mod;
}

int query(int version, int l, int r) {
    return query(version, 0, n - 1, l, r);
}

void solve(int index) {
    cin >> n;
    for (int i = 0; i < n; i++) {
        cin >> arr[i];
    }
    seive();
    root[0] = Build(0, n - 1);
    vector<vector<pair<int, int>>> prev(3 * N);
    for (int i = 0; i < n; ++i) {
        if (i)
            root[i] = root[i - 1];
        int x = arr[i];
        while (x > 1) {
            int p = primes[x];
            int cnt = 0;
            while (x % p == 0) {
                x /= p;
                cnt++;
            }
            while (prev[p].size() && prev[p].back().second < cnt) {
                ll val = prev[p].back().second;
                modify(root[i], p, prev[p].back().first,
                       prev[p].back().second, -val);
                prev[p].pop_back();
                if (prev[p].size()) {
                    modify(root[i], p, prev[p].back().first,
                           prev[p].back().second, val);
                }
            }
            if (prev[p].size()) {
                modify(root[i], p, prev[p].back().first,
                       prev[p].back().second, -cnt);
            }
            prev[p].emplace_back(i, 0);
            modify(root[i], p, prev[p].back().first,
                   prev[p].back().second, cnt);
        }
    }
    cin >> q;
    ll ans = 0;
    while (q--) {
        int l, r;
        cin >> l >> r;
        l--, r--;
        ans = query(root[r], l, r);
        cout << ans << '\n';
    }
}

signed main() {
//    freopen("spooky_splits_validation_input.txt","rt",stdin);
//    freopen("output.txt","wt",stdout);
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    cout.tie(nullptr);
    ll t = 1;
//    cin >> t;
    for (int i = 1; i <= t; i++)
        solve(i);

    return 0;
}

