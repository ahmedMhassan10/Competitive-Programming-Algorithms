/// save distances 
    ll n;cin>>n;
    int a[n], mxl[n], mxr[n], mnl[n], mnr[n];
    for(int i = 0; i < n; i++) cin >> a[i];
    stack<int> s1, s2, s3, s4;
    for(int i = 0; i < n; i++) {
        while(!s1.empty() && a[s1.top()] < a[i])
            s1.pop();
        while(!s2.empty() && a[s2.top()] > a[i])
            s2.pop();
        while(!s3.empty() && a[s3.top()] < a[n - 1 - i])
            s3.pop();
        while(!s4.empty() && a[s4.top()] > a[n - 1 - i])
            s4.pop();
        mxl[i] = s1.empty() ? -1 : i - s1.top();// distance
        mnl[i] = s2.empty() ? -1: i - s2.top();//distance
        mxr[n - 1 - i] = s3.empty() ? -1: s3.top() - (n - 1 - i);//distance
        mnr[n - 1 - i] = s4.empty() ? -1: s4.top() - (n - 1 - i);//distance
        s1.push(i);
        s2.push(i);
        s3.push(n - 1 - i);
        s4.push(n - 1 - i);
    }


/// save values 

    ll n;cin>>n;
    int a[n], mxl[n], mxr[n], mnl[n], mnr[n];
    for(int i = 0; i < n; i++) cin >> a[i];
    stack<int> s1, s2, s3, s4;
    for(int i = 0; i < n; i++) {
        while(!s1.empty() && a[s1.top()] < a[i])
            s1.pop();

        while(!s2.empty() && a[s2.top()] > a[i])
            s2.pop();

        while(!s3.empty() && a[s3.top()] < a[n - 1 - i])
            s3.pop();

        while(!s4.empty() && a[s4.top()] > a[n - 1 - i])
            s4.pop();

        mxl[i] = s1.empty() ? -1 : a[s1.top()];// value

        mnl[i] = s2.empty() ? -1 : a[s2.top()];// value

        mxr[n - 1 - i] = s3.empty() ? -1 : a[s3.top()] ;// value

        mnr[n - 1 - i] = s4.empty() ? -1 : a[s4.top()] ;// value

        s1.push(i);
        s2.push(i);
        s3.push(n - 1 - i);
        s4.push(n - 1 - i);
    }



//////////////////////////////////////////////////////////////////////////////////////////////////////

//// get the maximum area



////https://cses.fi/problemset/task/1142/



    int num;cin>>num;
    int a[num],  mnl[num], mnr[num];
    int maxi=0;
    for(int i = 0; i < num; i++)
    {
        cin>>a[i];
        maxi=max(a[i],maxi);
    }
    stack<int>  s2,  s4;
    for(int i = 0; i < num; i++) {
        while(!s2.empty() && a[s2.top()] >= a[i])
            s2.pop();
        while(!s4.empty() && a[s4.top()] >= a[num - 1 - i])
            s4.pop();
        mnl[i] = s2.empty() ? -1: i - s2.top();//distance
        mnr[num - 1 - i] = s4.empty() ? -1: s4.top() - (num - 1 - i);//distance
        s2.push(i);
        s4.push(num - 1 - i);
    }
    for (int i = 0; i < num; ++i) {
        if(mnl[i]==-1){
            mnl[i]=i+1;
        }
        if(mnr[i]==-1){
            mnr[i]=num-i;
        }
    }
    for (int i = 0; i < num; ++i) {
        ll prev=mnl[i],next=mnr[i];
        ll len2=(prev-1)+(next-1)+1;
        ll res=len2*a[i];
        maxi=max(maxi,res);
    }
    cout<<maxi;


///////////////////////////////////////////////////////////////////////


// get the maximum area of rectange contain only zeroes



int zero_matrix(vector<vector<int>> a) {
    int n = a.size();
    int m = a[0].size();

    int ans = 0;
    vector<int> d(m, -1), d1(m), d2(m);
    stack<int> st;
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < m; ++j) {
            if (a[i][j] == 1)
                d[j] = i;
        }

        for (int j = 0; j < m; ++j) {
            while (!st.empty() && d[st.top()] <= d[j])
                st.pop();
            d1[j] = st.empty() ? -1 : st.top();
            st.push(j);
        }
        while (!st.empty())
            st.pop();

        for (int j = m - 1; j >= 0; --j) {
            while (!st.empty() && d[st.top()] <= d[j])
                st.pop();
            d2[j] = st.empty() ? m : st.top();
            st.push(j);
        }
        while (!st.empty())
            st.pop();

        for (int j = 0; j < m; ++j)
            ans = max(ans, (i - d[j]) * (d2[j] - d1[j] - 1));
    }
    return ans;
}