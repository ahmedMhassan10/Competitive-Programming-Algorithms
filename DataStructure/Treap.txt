// from cp algo
// https://cp-algorithms.com/data_structures/treap.html

struct item {
    int key, prior,cnt=1;
    item *l, *r;
    item () { }
    item (int key) : key(key), prior(rand()), l(NULL), r(NULL) { }
    item (int key, int prior) : key(key), prior(prior), l(NULL), r(NULL) { }
};
typedef item* pitem;

int cnt (pitem t) {
    return t ? t->cnt : 0;
}

void upd_cnt (pitem t) {
    if (t)
        t->cnt = 1 + cnt(t->l) + cnt (t->r);
}
void split (pitem t, int key, pitem & l, pitem & r) {
    if (!t)
        l = r = NULL;
    else if (t->key <= key)
        split (t->r, key, t->r, r),  l = t, upd_cnt(l), upd_cnt(r);
    else
        split (t->l, key, l, t->l),  r = t,upd_cnt(l), upd_cnt(r);

}
void insert (pitem & t, pitem it) {
    if (!t)
        t = it;
    else if (it->prior > t->prior)
        split (t, it->key, it->l, it->r),  t = it;// replace t by it
    else
        insert (t->key <= it->key ? t->r : t->l, it);// go left or go right
    upd_cnt(t);
}

void merge (pitem & t, pitem l, pitem r) {
    if (!l || !r)
        t = l ? l : r;
    else if (l->prior > r->prior)
        merge (l->r, l->r, r),  t = l;
    else
        merge (r->l, l, r->l),  t = r;
    upd_cnt(t);
}

void erase (pitem & t, int key) {
    if (t->key == key) {
        pitem th = t;
        merge (t, t->l, t->r);
        delete th;
    }
    else
        erase (key < t->key ? t->l : t->r, key);
    upd_cnt(t);
}

pitem unite (pitem l, pitem r) {
    if (!l || !r)  return l ? l : r;
    if (l->prior < r->prior)  swap (l, r);
    pitem lt, rt;
    split (r, l->key, lt, rt);
    l->l = unite (l->l, lt);
    l->r = unite (l->r, rt);
    return l;
}

void heapify (pitem t) {
    if (!t) return;
    pitem max = t;
    if (t->l != NULL && t->l->prior > max->prior)
        max = t->l;
    if (t->r != NULL && t->r->prior > max->prior)
        max = t->r;
    if (max != t) {
        swap (t->prior, max->prior);
        heapify (max);
    }
}

pitem build (vector<int>& a, int n) { // build in o(N) based on array a with length n
    // Construct a treap on values {a[0], a[1], ..., a[n - 1]}
    if (n == 0) return NULL;
    int mid = n / 2;
    pitem t = new item (a[mid], rand ());
    t->l = build (a, mid);
    t->r = build (a + mid + 1, n - mid - 1);
    heapify (t);
    upd_cnt(t);
    return t;
}

void output (pitem t) {
    if (!t)  return;
    output (t->l);
    printf ("%d ", t->value);
    output (t->r);
}
///////////////////////////////////////////////////////////////////////////////////////////////



// Implicit Treaps


struct item {
    int  prior,cnt=1;
    char key;
    item *l, *r;
    item () { }
    item (char key) : key(key), prior(rand()), l(NULL), r(NULL) { }
    item (char key, int prior) : key(key), prior(prior), l(NULL), r(NULL) { }
};
typedef item* pitem;

int cnt (pitem t) {
    return t ? t->cnt : 0;
}

void upd_cnt (pitem t) {
    if (t)
        t->cnt = 1 + cnt(t->l) + cnt (t->r);
}

// use merge and split to insert & erase elelment

void merge (pitem & t, pitem l, pitem r) {
    if (!l || !r)
        t = l ? l : r;
    else if (l->prior > r->prior)
        merge (l->r, l->r, r),  t = l;
    else
        merge (r->l, l, r->l),  t = r;
    upd_cnt (t);
}

void split (pitem t, pitem & l, pitem & r, int key, int add = 0) {  // l the first key elements r is the rest
    if (!t)
        return void( l = r = 0 );
    int cur_key = add + cnt(t->l); //implicit key
    if (key <= cur_key)
        split (t->l, l, t->l, key, add),  r = t;
    else
        split (t->r, t->r, r, key, add + 1 + cnt(t->l)),  l = t;
    upd_cnt (t);
}

void output (pitem t) {
    if (!t)  return;
    output (t->l);
    cout<< t->key;
    output (t->r);
}

void func(int index){
    ll n,q;cin>>n>>q;
    string str;cin>>str;
    pitem root=new item(str[0]);
    for (int i = 1; i < n; ++i) {
        merge(root,root,new item(str[i]));
    }
    while (q--){
        ll st,en;cin>>st>>en;
        ll rem=en-st+1;
        pitem l1,r1,l2,r2;
        split(root,l1,r1,st-1);
        split(r1,l2,r2,rem);
        merge(root,l1,r2);
        merge(root,root,l2);
    }
    output(root);
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////



///// reverse or lazy treap
////  https://cses.fi/problemset/task/2073

typedef struct item * pitem;
struct item {
    int prior, cnt;
    bool rev;
    char value;
    pitem l, r;
    item (char value) : value(value), prior(rand()), l(NULL), r(NULL) { }
    item (char value, int prior) : value(value), prior(prior), l(NULL), r(NULL) { }
};

int cnt (pitem it) {
    return it ? it->cnt : 0;
}

void upd_cnt (pitem it) {
    if (it)
        it->cnt = cnt(it->l) + cnt(it->r) + 1;
}

void push (pitem it) { 		// we use it as lazy propagation
    if (it && it->rev) {
        it->rev = false;
        swap (it->l, it->r);
        if (it->l)  it->l->rev ^= true;
        if (it->r)  it->r->rev ^= true;
    }
}

void merge (pitem & t, pitem l, pitem r) {
    push (l);
    push (r);
    if (!l || !r)
        t = l ? l : r;
    else if (l->prior > r->prior)
        merge (l->r, l->r, r),  t = l;
    else
        merge (r->l, l, r->l),  t = r;
    upd_cnt (t);
}

void split (pitem t, pitem & l, pitem & r, int key, int add = 0) {
    if (!t)
        return void( l = r = 0 );
    push (t);
    int cur_key = add + cnt(t->l);
    if (key <= cur_key)
        split (t->l, l, t->l, key, add),  r = t;
    else
        split (t->r, t->r, r, key, add + 1 + cnt(t->l)),  l = t;
    upd_cnt (t);
}

void reverse (pitem t, int l, int r) {
    pitem t1, t2, t3;
    split (t, t1, t2, l-1);
    split (t2, t2, t3, r-l+1);
    t2->rev ^= true;
    merge (t, t1, t2);
    merge (t, t, t3);
}

void output (pitem t) {
    if (!t)  return;
    push (t);
    output (t->l);
    cout<<t->value;
    output (t->r);
}

void func(int index){
    ll n,q;cin>>n>>q;
    string str;cin>>str;
    pitem root=new item(str[0]);
    for (int i = 1; i < n; ++i) {
        merge(root,root,new item(str[i]));
    }
    while (q--){
        ll st,en;cin>>st>>en;
        reverse(root,st,en);
    }
    output(root);
}
/////////////////////////////////////////////////////////////////////////////////////


// to get sum we handle it by prefix sums
// https://cses.fi/problemset/task/2074

typedef struct item * pitem;
struct item {
    int prior, cnt;
    bool rev;
    int value;
    int sum;
    pitem l, r;
    item (int value) : value(value),sum(value), prior(rand()), l(NULL), r(NULL) { }
    item (int value, int prior) : value(value), prior(prior), l(NULL), r(NULL) { }
};

int cnt (pitem it) {
    return it ? it->cnt : 0;
}
int sm(pitem it){
    return it ? it->sum : 0;
}
void upd_cnt (pitem it) {
    if (it)
    {
        it->cnt = cnt(it->l) + cnt(it->r) + 1;
        it->sum=sm(it->l)+sm(it->r)+it->value;
    }
}

void push (pitem it) { 		// we use it as lazy propagation
    if (it && it->rev) {
        it->rev = false;
        swap (it->l, it->r);
        if (it->l)  it->l->rev ^= true;
        if (it->r)  it->r->rev ^= true;
    }
}

void merge (pitem & t, pitem l, pitem r) {
    push (l);
    push (r);
    if (!l || !r)
        t = l ? l : r;
    else if (l->prior > r->prior)
        merge (l->r, l->r, r),  t = l;
    else
        merge (r->l, l, r->l),  t = r;
    upd_cnt (t);
}

void split (pitem t, pitem & l, pitem & r, int key, int add = 0) {
    if (!t)
        return void( l = r = 0 );
    push (t);
    int cur_key = add + cnt(t->l);
    if (key <= cur_key)
        split (t->l, l, t->l, key, add),  r = t;
    else
        split (t->r, t->r, r, key, add + 1 + cnt(t->l)),  l = t;
    upd_cnt (t);
}

ll query (pitem t, int key, int add = 0) {
    if (!t)return 0;
    push (t);
    int cur_key = add + cnt(t->l);
    if (key > cur_key)
        return sm(t->l)+t->value+ query(t->r, key, add + 1 + cnt(t->l));
    else
        return query(t->l, key, add);
}
void reverse (pitem t, int l, int r) {
    pitem t1, t2, t3;
    split (t, t1, t2, l-1);
    split (t2, t2, t3, r-l+1);
    t2->rev ^= true;
    merge (t, t1, t2);
    merge (t, t, t3);
}

void output (pitem t) {
    if (!t)  return;
    push (t);
    output (t->l);
    cout<<t->value;
    output (t->r);
}

void func(int index){
    ll n,q;cin>>n>>q;
    ll u;
    cin>>u;
    pitem root=new item(u);
    for (int i = 1; i < n; ++i) {
        cin>>u;
        merge(root,root,new item(u));
    }
    while (q--){
        ll t;cin>>t;
        ll st,en;cin>>st>>en;
        if(t==1){
            reverse(root,st,en);
        }else{
            ll enn= query(root,en,0),stt= query(root,st-1,0);
            cout<<enn-stt<<endl;
        }
    }
}

//////////////////////////////////////////////////
// or we can use this technique

void func(int index){
    ll n,q;cin>>n>>q;
    ll u;
    cin>>u;
    pitem root=new item(u);
    for (int i = 1; i < n; ++i) {
        cin>>u;
        merge(root,root,new item(u));
    }
    while (q--){
        ll t;cin>>t;
        ll st,en;cin>>st>>en;
        if(t==1){
            reverse(root,st,en);
        }else{
            pitem l1,r1,l2,r2;
            split(root,l1,r1,st-1);
            split(r1,l2,r2,en-st+1);
            cout<<l2->sum<<endl;
            merge(root,l1,l2);
            merge(root,root,r2);
        }
    }
}



//////////////////////////////////////////////////

///////////

https://cses.fi/problemset/task/2420


ll base=31;
ll add(ll a, ll b) {return ((a % MOD + b % MOD) + MOD) % MOD;}
ll multi(ll a, ll b) {return ((a % MOD * b % MOD) + MOD) % MOD;}
vi pw(N);
typedef struct item * pitem;
struct item {
    int prior, cnt;
    ll value;
    ll sum;
    ll hf,hr;
    pitem l, r;
    item (ll value) : value(value), prior(rand()), l(NULL), r(NULL),sum(value),hf(value),hr(value) { }
};
int cnt (pitem t) {return t ? t->cnt : 0;}
int gf (pitem t) {return t ? t->hf : 0;}
int gr (pitem t) {return t ? t->hr : 0;}
void upd_cnt (pitem t) {
    if (t) {
        t->cnt = 1 + cnt(t->l) + cnt(t->r);
        // hash forward ,reverse
        t->hf = add(gf(t->l), add(multi(pw[cnt(t->l)], t->value), multi(pw[cnt(t->l) + 1], gf(t->r))));
        t->hr = add(gr(t->r), add(multi(pw[cnt(t->r)], t->value), multi(pw[cnt(t->r) + 1], gr(t->l))));
    }
}
void merge (pitem & t, pitem l, pitem r) {
    if (!l || !r)
        t = l ? l : r;
    else if (l->prior > r->prior)
        merge (l->r, l->r, r),  t = l;
    else
        merge (r->l, l, r->l),  t = r;
    upd_cnt (t);
 
}
void split (pitem t, pitem & l, pitem & r, int key, int add = 0) {
    if (!t)
        return void( l = r = 0 );
    int cur_key = add + cnt(t->l);
    if (key <= cur_key)
        split (t->l, l, t->l, key, add),  r = t;
    else
        split (t->r, t->r, r, key, add + 1 + cnt(t->l)),  l = t;
    upd_cnt (t);
}
 
void output (pitem t) {
    if (!t)  return;
    output (t->l);
    cout<<t->value<<" ";
    output (t->r);
}
void solve() {
    pw[0] = 1;
    for (int i = 1; i < N; ++i) pw[i] = multi(pw[i - 1], base);
    ll n, q;
    cin >> n >> q;
    string x;
    cin >> x;
    pitem root = new item(x[0]-'a');
    for (int i = 1; i < x.size(); ++i) {
        merge(root, root, new item(x[i] - 'a'));
    }
 
    for (int i = 0; i < q; ++i) {
        ll op;
        cin >> op;
        if (op == 1) {
            ll l, r;
            cin >> l >> r;
            l--, r--;
            pitem s1, s2, s3;
            split(root, s1, s3, r + 1);
            split(s1, s1, s2, l);
            merge(root, s1, s3);
        } else if (op == 2) {
            char c;
            ll p;
            cin >> c >> p;
            p--;
            pitem s1, s2;
            split(root, s1, s2, p);
            merge(s1, s1, new item(c - 'a'));
            merge(root, s1, s2);
        } else {
            ll l, r;
            cin >> l >> r;
            l--, r--;
            pitem s1, s2, s3;
            split(root, s1, s3, r + 1);
            split(s1, s1, s2, l);
            if (gf(s2) == gr(s2)) cout << "Yes" << endl;
            else cout << "No" << endl;
            merge(root, s1, s2);
            merge(root, root, s3);
        }
    }
}
