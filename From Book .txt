// num % A = B values from 1 to C
int countValues(int A, int B, int C)
{
    if (B >= A)
        return 0;
    if (B == 0)
        return C/A;
    int ans = C / A;
 
    if (ans * A + B <= C)
        ans++;
    return ans;
}
int f(int l, int r, int m, int n)
{
    return countValues(n, m, r) - countValues(n, m, l-1);
}

/////////////////////////////////////////////////////////////////////////////////////////////////
maximum subarray if there is negative 

int best = 0, sum = 0;
for (int k = 0; k < n; k++) {
	sum = max(array[k],sum+array[k]);
	best = max(best,sum);
}
cout << best << "\n";


//////////////////////////////////////////////////////////////////////////////////   
generate subset 


for (int b = 0; b < (1<<n); b++) {
vector<long long> subset;
        for (int i = 0; i < n; i++) {
                if (b&(1<<i)) subset.push_back(a[i]);    //  if b begin from 0 phay include if 1 oppsite   a is vector we get subset to it ;
        }  
}




 



