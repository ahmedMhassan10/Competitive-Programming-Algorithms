ll fact[N], inv[N];

ll add ( ll a , ll b, ll mod)
{
    return (a + b) % mod;
}
ll sub ( ll a , ll b, ll mod)
{
    return (a - b +mod) % mod;
}
ll mul ( ll a , ll b, ll mod)
{
    return (1LL * a * b) % mod;
}
ll fop( ll b , ll p, ll mod)
{
    if(!p)
        return 1;
    ll temp = fop(b,p/2,mod)%mod;
    temp = mul(temp,temp,mod);
    if(p&1)
        temp = mul(temp,b,mod);
    return temp%mod;
}
ll  modInverse(ll  n, ll mod){return fop(n, mod - 2, mod);}
ll nCr( ll n , ll r, ll mod)
{
    if(n<r)
        return 0;
    return mul(fact[n],mul(inv[n-r],inv[r],mod),mod);
}
ll nPr( ll n , ll r, ll mod)
{
    return mul(nCr(n,r,mod),fact[r],mod);
}

void testCase(ll mod,ll n=N-1) {
//    fact[0] = inv[0] = 1;
//    for ( ll i = 1 ; i <= n ; i++)
//    {
//        fact[i] = mul(i,fact[i-1],mod);
//        inv[i] = fop(fact[i],mod-2,mod);
//    }
    fact[0] = fact[1] = inv[0] = inv[1] = 1;
    for (int i = 2; i <= n; i++)
    {
        fact[i] = fact[i - 1] * i % mod;
        inv[i] = inv[mod % i] * (mod - mod / i) % mod;
    }
    for (int i = 2; i <= n; i++)
        inv[i] = inv[i] * inv[i - 1] % mod;
}


/////////////////////////////////////////////////////
using pascal 


ll ncr[50][50];

void pre() {
    for (ll i = 0; i < 50; i++)
        ncr[i][0] = 1;
    for (ll i = 1; i < 50; i++) {
        for (ll j = 1; j <= i; j++)
            ncr[i][j] = ncr[i - 1][j - 1] + ncr[i - 1][j];
    }
}
ll nCr( ll n , ll r)
{
    return ncr[n][r];
}

