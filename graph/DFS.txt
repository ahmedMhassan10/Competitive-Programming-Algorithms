vector<int> topsort;
vector<int> start, finish;
bool anyCycle = 0;
int timer = 0;

const int N = 1e4+10;
vector<vector < int > >adj(N);
vector<bool>vis(N,0);
void dfs( int node)
{
    vis[node] = true;
    for ( auto child : adj[node])
        if(vis[child] == false)
            dfs(child);
}
/////////
code to hash treeeee :-)

map<vector<int>, int> mp;
int idx = 0;

int dfs(int s, int p, vector<int> adj[]) {
    vector<int> v;
    for (auto i: adj[s]) {
        if (i != p) 
            v.push_back(dfs(i, s, adj));
    }
    sort(v.begin(), v.end());
    if (!mp.count(v)) mp[v] = idx++;
    return mp[v];
}

////////////////////////////
some hashing problem alsoooo  https://codeforces.com/contest/1800/submission/195841803
vll lvl(N),sz(N);
vector<vll>adj(N);
vll childs(N);
vll hashOne(N),hashTwo(N);
 
ll add(ll a, ll b,ll mod) {
    return ((a % mod + b % mod) + mod) % mod;
}
 
ll mul(ll a, ll b,ll mod) {
    return ((a % mod * b % mod) + mod) % mod;
}
 
ll minu(ll a, ll b,ll mod) {
    return ((a % mod - b % mod) + mod) % mod;
}
 
ll fastp(ll a, ll b,ll mod) {
    if (b == 0)return ll(1);
    ll temp = fastp(a, b / 2,mod);
    ll total = mul(temp, temp,mod);
    if (b % 2 == 1) {
        total = mul(total, a,mod);
    }
    return total;
}
vll pw(N),pw2(N);
void pre() {
    pw[0] = 1;
    pw2[0]=1;
    for (int i = 1; i < N; ++i) {
        pw[i] = mul(pw[i - 1], 2750159,mod);
        pw2[i] = mul(pw2[i - 1], 2750161,mod2);
    }
}
 
void getSz(int node,int par){
    sz[node]=1;
    lvl[node]=lvl[par]+1;
    fvec(item,adj[node]){
        if(item==par)continue;
        getSz(item,node);
        sz[node]+=sz[item];
        childs[node]++;
    }
}
bool res=1;
bool dfs(int node,int par,bool go){
    if(res==0)return 0;
    vector<pair<ll,pll>>compare;
    if(go==0||node==1) {
        ll siz = 0;
        hashOne[node] = 1;
        hashTwo[node] = 1;
        vp addd;
        fvec(item, adj[node]) {
            if (item == par)continue;
            dfs(item, node, 0);
            addd.push_back({sz[item],item});
        }
        sort(all(addd));
        fvec(item,addd){
            hashOne[node] = add(hashOne[node], mul(hashOne[item.S], pw[siz], mod), mod);
            hashTwo[node] = add(hashTwo[node], mul(hashTwo[item.S], pw[siz], mod2), mod2);
            siz += sz[item.S];
        }
    }
    bool odd=childs[node]%2;
    if(go==0)
        return 1;
    fvec(item,adj[node]){
        if(item==par)continue;
        compare.push_back({hashOne[item],{hashTwo[item],item}});
    }
    sort(all(compare));
    compare.push_back({-1,{-1,0}});
    fo(i,compare.size()-1){
        if(compare[i].F==compare[i+1].F&&compare[i].S.F==compare[i+1].S.F){
            i++;
        }else if(odd){
            odd=0;
            dfs(compare[i].S.S,node, true);
        }else
            res=0;
    }
    return 1;
}
void func(int ind) {
    ll n;cin>>n;
    fp(i,1,n){
        hashOne[i]=0;hashTwo[i]=0;
        adj[i].clear();
        sz[i]=0;
        lvl[i]=0;
        childs[i]=0;
    }
    vector<pll>vec;
    fp(i,1,n-1){
        ll u,v;cin>>u>>v;
        vec.push_back({u,v});
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
    res=1;
    getSz(1,0);
    dfs(1,0,1);
    
    if(res){
        cout<<"YES\n";
    }else
        cout<<"NO\n";
}

//////////////////////////////////////

-->   return the cycle path in graph

vector<vector < int > >adj(N);
vector<bool> vis(N,0);
ll stNode=-1,enNode=-1;
vector<int> parent(N);
bool cycle=0;
void dfs( int node,int par)
{
    vis[node]=1;
    parent[node]=par;
    for(auto item:adj[node]){
        if(item==par||cycle)continue;
        if(vis[item]&&cycle==0){
            stNode=node,enNode=item;
            cycle=1;
            return;
        }else{
            dfs(item,node);
        }
    }
}
void func(ll index) {
    ll n,m;cin>>n>>m;
    for(int i=0;i<m;i++){
        ll u,v;cin>>u>>v;
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
    for(int i=1;i<=n;i++){
        if(vis[i]==0){
            dfs(i,0);
            if(stNode==-1)continue;
            vector<int> res;
            ll node=stNode;
            res.push_back(node);
            while (node!=enNode){
                node=parent[node];
                res.push_back(node);
            }
            res.push_back(stNode);
            cout<<res.size()<<'\n';
            for(auto item:res)cout<<item<<" ";
            return;
        }
    }cout<<"IMPOSSIBLE";
}
//////////////////////////////////////////


other way to get cycle


 
vector<vector < int > >adj(N);
vector<int> vis(N,0);
ll stNode=-1,enNode=-1;
vector<int> parent(N);
bool cycle=0;
ll rankk=1;
vector<int>dist(N);
stack<int>st;
vector<int> res;
void dfs( int node,int par)
{
    st.push(node);
    vis[node]=rankk;
    parent[node]=par;
    for(auto item:adj[node]){
        if(cycle)continue;
        if(vis[item]==rankk&&cycle==0&&dist[item]==0){
            stNode=node,enNode=item;
            while (st.top()!=item){
                res.push_back(st.top());
                st.pop();
            }
            res.push_back(item);
            cycle=1;
            return;
        }else if(vis[item]==0){
            dfs(item,node);
        }
    }
    if(cycle==0)st.pop();
}
////////////////////////////////////////

// get the minimum #of swaps to make array sorted

vector<vector < int > >adj(N);
vector<bool>vis(N,0);
map<ll,ll>component;
int index=1;
void dfs( int node)
{
    component[node]=index;
    vis[node] = true;
    for ( auto child : adj[node])
        if(vis[child] == false)
            dfs(child);
}
void func(int ind) {
   ll num;cin>>num;
   vis.assign(num+1,0);
   adj.assign(num+1,{});
   vll vec(num+1);
   fp(i,1,num){
       cin>>vec[i];
       adj[vec[i]].push_back(i);
       adj[i].push_back(vec[i]);
   }
   component.clear();
   index=0;
   ll cycles=0;
   fp(i,1,num){
       if(!vis[i]){
           cycles++;
           dfs(i);
            index++;
       }
   }
   cout<<num-cycles<<'\n';
}

//if u work with directed graph ---->> make vector of pair to save indegree of each node and sort it the start the dfs from lower degree to greater one.  


// https://codeforces.com/contest/131/problem/D problem on get cycles nodes

bool conected (int node,int n){
	dfs(1);
	fo(i,n){
		if(vis[i]==false)return false;
	}
	return true;
}
// detect cycle in undirected graph   
map<ll, vector < int > >adj;       
map<ll,bool> vis2;
bool cycle = false;
void cyclic( int node , int par)
{
    vis2[node] = true;
    for (auto child : adj[node])
       {
        if(vis2[child] == false)
            cyclic(child,node);
        else if (child != par)
            cycle = true;
    }
}
// detect cycle in directed graph   
vector<vector < int > >adj(N);
vector<bool> vis(N,0);
ll stNode=-1,enNode=-1;
vll parent(N);
bool cycle=0;
vector<bool>instack(N);
void dfs( int node,int par)
{

    instack[node]=1;
    vis[node] = true;
    parent[node]=par;
    for ( auto child : adj[node])
        if(vis[child] == false)
            dfs(child,node);
        else if(instack[child]){
            cycle =true;
            stNode=node,enNode=child;
        }
    instack[node]=0;
}


////////////////////////////////////////////////////////////////////////////////


Successor paths

vector<vector<int>>successor(N,vector<int>(M));
int succ(int node){
    return successor[node][0];
}
void solve() {
    ll n;cin>>n;
    vector<int>c(n+1);
    for (int i = 1; i <= n ; ++i) {
        cin>>c[i];
    }
    for (int i = 1; i <=n ; ++i) {
        cin>>successor[i][0];
    }
    for (int i = 1; i < M; ++i) {
        for (int j = 1; j <=n ; ++j) {
            successor[j][i]=successor[successor[j][i-1]][i-1];
        }
    }
    int x=1;// get any node in cycle 
    int a = succ(x);
    int b = succ(succ(x));
    while (a != b) {
        a = succ(a);
        b = succ(succ(b));
    }
    
    a = x;// get first node in cycle 
    while (a != b) {
        a = succ(a);
        b = succ(b);
    }
    int first = a;
    
    b = succ(a);// get length of cycle
    int length = 1;
    while (a != b) {
        b = succ(b);
        length++;
    }
    cout<<first<<" "<<length<<endl;
}