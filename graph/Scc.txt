/////////////////////////////////


Tarjan to get SCC


vector< vector<int> > adjList, comps;
vector<int> inStack, lowLink, dfn, comp;
stack<int> stk;
int ndfn;
void tarjan(int node) {
    lowLink[node] = dfn[node] = ndfn++, inStack[node] = 1;
    stk.push(node);

    for(int i=0;i< adjList[node].size();i++) {
        int ch = adjList[node][i];
        if (dfn[ch] == -1) {
            tarjan(ch);
            lowLink[node] = min(lowLink[node], lowLink[ch]);
        } else if (inStack[ch])
            lowLink[node] = min(lowLink[node], dfn[ch]);
    }

    if (lowLink[node] == dfn[node]) {
        comps.push_back(vector<int> ());
        int x = -1;
        while (x != node) {
            x = stk.top(), stk.pop(), inStack[x] = 0;
            comps.back().push_back(x);
            comp[x] = (comps.size()) - 1;
        }
    }
}
void init(){
    ndfn = 0;
    comps.clear();
    adjList.clear();
}

void scc() {
    int n = (adjList.size());
    inStack.clear();	inStack.resize(n);
    lowLink.clear();	lowLink.resize(n);
    dfn.clear();		dfn.resize(n, -1);
    ndfn = 0;

    comp.clear(), comp.resize(n);
    comps.clear();

    for(int i=0;i< n;i++)
        if (dfn[i] == -1)
            tarjan(i);
}
vector<vector<int>>dagList;
vector<int> inDeg, outDeg;
int cntSrc, cntSnk;
void computeCompGraph() {
    int csz = comps.size(), cntSrc = csz, cntSnk = csz;

    outDeg.clear();		outDeg.resize(csz);
    inDeg.clear();		inDeg.resize(comps.size());
    dagList.clear();		dagList.resize(csz);	//will contain duplicates

    for (int i = 0; i < (adjList.size()); i++)
        for (int j = 0; j < (adjList[i].size()); j++) {
            int k = adjList[i][j];
            if (comp[k] != comp[i]) {
                dagList[comp[i]].push_back(comp[k]);	//reverse
                if (!(inDeg[comp[k]]++))	cntSrc--;
                if (!(outDeg[comp[i]]++))	cntSnk--;
            } else
                ;// this edge is for a component comp[k]
        }

    // Min edges to convert DAG to one cycle
    if (comps.size() == 1)
        cout << "0\n";
    else {
        cout << max(cntSrc, cntSnk) << "\n";
    }
    
}

int main() {
	freopen("b.in", "rt", stdin);

	int cases;
	cin >> cases;

	while (cases--) {
	    int n, m;
            cin >> n >> m;
            adjList.clear();
            adjList = vector<vector<int> > (n);
        
            fo(i, m) {
                int f, t;
                cin >> f >> t;
                f--, t--;
                adjList[f].push_back(t);
            }
        
            scc();
	    computeCompGraph();

	}

	return 0;
}

/////////////////////////////////////////////////////////////////////////////////
--->2-sat problem :)


#define NOT(x)    (1^(x)) // Switch between even odd: (0, 1), (2, 3).. -->(i,!i)===(i,i^1)
#define getValue(x) (2*x) // get the hashed value in the algorithm

int n, m, ndfn;
vector< vector<int> > adjList, comps, dagList;
vector<int> inStack, lowLink, dfn, comp, assigned_val, cmp_root_node;
stack<int> stk;

void tarjan(int node) {
    lowLink[node] = dfn[node] = ndfn++, inStack[node] = 1;
    stk.push(node);

    for(int i=0;i< adjList[node].size();i++) {
        int ch = adjList[node][i];
        if (dfn[ch] == -1) {
            tarjan(ch);
            lowLink[node] = min(lowLink[node], lowLink[ch]);
        } else if (inStack[ch])
            lowLink[node] = min(lowLink[node], dfn[ch]);
    }

    if (lowLink[node] == dfn[node]) {
        comps.push_back(vector<int> ());
        int x = -1;
        while (x != node) {
            x = stk.top(), stk.pop(), inStack[x] = 0;
            comps.back().push_back(x);
            comp[x] = comps.size() - 1;
        }
        cmp_root_node[ comp[node] ] = node;		// ***
    }
}

void scc() {
    int n = (adjList.size());

    inStack.clear();		inStack.resize(n);
    lowLink.clear();		lowLink.resize(n);
    assigned_val.clear();	assigned_val.resize(n);
    cmp_root_node.clear();		cmp_root_node.resize(n);
    dfn.clear();			dfn.resize(n, -1);
    ndfn = 0;

    comp.clear(), comp.resize(n);
    comps.clear();

    for(int i=0;i< n;i++)
        if (dfn[i] == -1)
            tarjan(i);
}

// acceptable values: (0, 1), (1, 0), (1, 1)
void add_or(int a, int b)
{
    adjList[NOT(a)].push_back(b);
    adjList[NOT(b)].push_back(a);
}

// acceptable values: (0, 1), (1, 0)
void add_or_not_both(int a, int b) //--> for some specific problem
{
    // CNF: (a v b) & (!a v !b)  ==> E.g. can't be true for (1, 1) / (0, 0)
    add_or(a, b);
    add_or(NOT(a), NOT(b));
}

void force_value(int i, bool b)// to force node i to be true or force
{
    if(b)
        adjList[NOT(i)].push_back(i);
    else
        adjList[i].push_back(NOT(i));
}

bool is_solvable() // check if there is solution
{
    for(int i = 0 ; i < n ; i += 2)
        if( comp[i] == comp[NOT(i)] )
            return false;
    return true;
}

void assign_values()
{
    vector<int> comp_assigned_value(comps.size(), -1);

    for(int i=0; i<comps.size();i++) {
        if (comp_assigned_value[i] == -1){
            comp_assigned_value[i] = 1;
            int not_ithcomp = comp[ NOT(cmp_root_node[i]) ];
            comp_assigned_value[ not_ithcomp ] = 0;
        }
    }

    for(int i=0;i< n;i++)
         assigned_val[i] = comp_assigned_value[ comp[i] ];
}

void func(int index){
    cin>>m>>n;
    n=2*n;
    adjList.clear();
    adjList.resize(n);

    for (int i = 0; i <m ; ++i) {
        char ch1,ch2;
        int a,b;
        cin>>ch1>>a>>ch2>>b;
        a--,b--;
        a= getValue(a);
        b= getValue(b);
        if(ch1=='-')a= NOT(a);
        if(ch2=='-')b= NOT(b);
        add_or(a, b);
    }
    scc();
    if (!is_solvable())
    {
        cout<<"IMPOSSIBLE\n";
        return;
    }
    assign_values();	// solution in assign_values array
    for (int i = 0; i < n; i+=2) {
        if(assigned_val[i]==1){
            cout<<"+ ";
        }else {
            cout<<"- ";
        }
    }
}
/////////////////////////////////////////////////////////////////////////////////
// Kosarajuâ€™s algorithm
void dfs_topsort(vector<vector<int>>& adj, vector<bool>& used, vector<int>& topsort, int node)
{
    int i;
    used[node] = true;
    for (i=0;i<(adj[node].size()); ++i)
        if (!used[ adj[node][i] ])
            dfs_topsort(adj, used, topsort, adj[node][i]);
    topsort.push_back(node);
}

void dfs_scc(vector<vector<int>>& transpose, vector<bool>& used, vector<int>& scc, int node)
{
    int i;
    used[node] = true;
    for (i=0;i<(transpose[node].size()) ; ++i)
        if (!used[transpose[node][i]])
        {
            scc[transpose[node][i]] = scc[node];
            dfs_scc(transpose, used, scc, transpose[node][i]);
        }
}
void func(int index){
    int n, m, from, to;
    cin>>n>>m;
    vector<vector<int>> adj(n), transpose(n);
    vector<int> scc(n), numof_scc, topsort;
    vector<bool> used(n, false), used2(n, false);

    for(int i=0;i< m;i++) {
        cin>>from>>to;
        adj[from-1].push_back(to-1);
        transpose[to-1].push_back(from-1);
    }

    for(int i=0;i< n;i++)
        if (!used[i])
            dfs_topsort(adj, used, topsort, i);

    for(int j= n-1;j>= 0;j--) //Start from end as dfs_topsort reverse them.
    {
        int i = topsort[j];
        if (!used2[i]) {
            numof_scc.push_back(i);  scc[i] = i; //Mark as a SCC
            dfs_scc(transpose, used2, scc, i);
        }
    }

    sort( numof_scc.begin(),numof_scc.end() );
    numof_scc = vector<int>(numof_scc.begin(), unique(numof_scc.begin(),numof_scc.end()));

    cout<<"# SCC " <<numof_scc.size()<<"\n";

    vector<vector<int>> comps(n);
    for(int i=0;i< n;i++) comps[scc[i]].push_back(i);

    for(int i=0;i< n;i++) {
        for(int j=0; j<comps[i].size();j++)
            cout<<comps[i][j]+1<<" ";
        if(comps[i].size() != 0)
            cout<<"\n";
    }
}


////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////


//   Bridgessss

// if the graph was directed then just solve it using scc

// the next code handle undirected 


vector<vector<int>> adjMat(N);
int low[N], dfn[N], num, n,m;
vector<pair<int, int> > bridges;
void art_bridges(int i, int p) {
    low[i] = dfn[i] = num++;
    for (auto j : adjMat[i])
        if (j != p) {
            if (dfn[j] == 0) {
                art_bridges(j, i);
                low[i] = min(low[i], low[j]);
                if (low[j] == dfn[j])  /////(low[j]>dfn[i])
                    bridges.push_back(make_pair(min(i, j), max(i, j)));
            } else
                low[i] = min(low[i], dfn[j]);
        }
}
void run_art_bridges() {
    for(int i=0;i< n;i++)
        low[i] = -1, dfn[i] = 0;
    bridges.clear();

    for(int i=0;i< n;i++)
        if (!dfn[i])
            art_bridges(i, -1);
    sort(bridges.begin(),bridges.end());
}

void func(int index){
    num=1;
    cin>>n>>m;
    for (int i = 0; i < m; ++i) {
        ll u,v;cin>>u>>v;
        u--,v--;
        adjMat[u].push_back(v);
        adjMat[v].push_back(u);
    }
    run_art_bridges();
    cout<<bridges.size()<<endl;
    for (auto item:bridges){
        cout<<item.first+1<<' '<<item.second+1<<endl;
    }
}


/////////////////////////////////////////////////////////////////////


Articilation Points


const int NOT_VISITED = -1;

int dfn[N], low[N];
bool visited[N], root;
set<int> artpoints;		    //For removing arts if repetation
vector< vector<int> > graph;

//if we want to print the BI Connected  components

//stack< pair<int, int> > component;	//pair<int, int> is edge[u--v]

int num;

int min(int a, int b)
{
    return (a<b)?a:b;
}

void init(int n)
{

    num = 0;
    root=0;
    artpoints.clear();
    graph.clear();
    graph.resize(n);
    int i;
    for(i=0;i<n;i++)
    {
        visited[i] = false;
        dfn[i] = low[i] = NOT_VISITED;
    }

}

void bicon(int u, int v)	//O(n+e)
{
    int i, w;
    pair<int, int> edge;
    dfn[u] = low[u] = num++;

    for(i=0;i<graph[u].size();i++)
    {
        w = graph[u][i];
//                if we want to print the BI Connected  components

//        if(v!=w && dfn[w]<dfn[u])
//            component.push( make_pair(u, w));

        if(dfn[w] == NOT_VISITED)	// for each bcc, happens once ONLY
        {
            bicon(w, u);
            low[u] = min(low[u], low[w]);

            if(low[w] >= dfn[u])
            {
                if (dfn[u]==0 && root==false)
                    root=true;
                else
                    artpoints.insert(u);

//                if we want to print the BI Connected  components
//                int cnt = 0;
//                do
//                {
//                    cnt++;
//                    edge = component.top();
//                    component.pop();
//                    cout<<edge.first+1<<" "<<edge.second+1<<"\n";
//                }while(edge.first != u || edge.second != w);
//
//                if(cnt == 1)
//                    cout<<edge.second+1<<" "<<edge.first+1<<"\n";
            }
        }
        else if(w != v)
            low[u] = min(low[u], dfn[w]);
    }
}


void func(int index){
    int i, n, links, from, to;
    cin>>n>>links;


    init(n);
    for(i=0;i<links;i++)
    {
        cin>>from>>to;
        graph[from-1].push_back(to-1);
        graph[to-1].push_back(from-1);
    }
    bicon(0, NOT_VISITED);
    cout<<artpoints.size()<<endl;
    for(auto item:artpoints){
        cout<<item+1<<" ";
    }
}


