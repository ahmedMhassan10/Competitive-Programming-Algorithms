
struct DSU{
    vector<int> par, sz;
    stack<pair<int,int>>rB;// node ,parent
    ll comp=0;
    void init(int n)
    {
        par.resize(n+1);
        sz.resize(n+1);
        comp=n;
        while (rB.size())
            rB.pop();
        for ( int i = 0 ; i <= n ;i++)
            par[i] = i , sz[i] = 1;
    }
    int findparent( int u)
    {
        if(par[u] == u)
            return  u;
        return  findparent(par[u]);
    }
    void connect( int u , int v)
    {
        u = findparent(u);
        v = findparent(v);
        if ( u == v)
        {
            return;
        }
        comp--;
        if(sz[v] < sz[u])
        {
            rB.push({v,par[v]});
            par[v] = u ,sz[u] += sz[v];
        }
        else
        {
            rB.push({u,par[u]});
            par[u] = v,sz[v] += sz[u];
        }
    }
    void addCheck(){
        rB.push({-1,-1});
    }
    void roll_back(){
        if(rB.empty())
            return ;
        auto item=rB.top();
        while (item.first!=-1) {
            rB.pop();
            par[item.first] = item.second;
            comp++;
            if(rB.empty())break;
            item=rB.top();
        }
        if(rB.size()){
            rB.pop();
        }
    }
};
struct query{
    int ch;
    ll u,v;
};
DSU dsu;
vector<vector<int>>seg(N<<2);
vector<query> queries(N);
vector<int> answer(N,-1);
void update(int node,int l,int r,int st,int en,int qIdx){
    if(st>r||l>en)return;
    if(st<=l&&r<=en){
        seg[node].push_back(qIdx);
        return;
    }
    ll mid=(l+r)/2;
    update(2*node,l,mid,st,en,qIdx);
    update(2*node+1,mid+1,r,st,en,qIdx);
}
void dfs(int node,int l,int r){
    dsu.addCheck();
    for(auto item:seg[node]){
        if(queries[item].ch=='+')
            dsu.connect(queries[item].u,queries[item].v);
    }
    if(l==r){
        answer[l]=dsu.comp;
    }else{
        ll md=(l+r)/2;
        dfs(2*node,l,md);
        dfs(2*node+1,md+1,r);
    }
    dsu.roll_back();
}
void func(int index) {
    ll n,m;cin>>n>>m;// call update for m
    dsu.init(n);
    map<pair<int,int>,pair<int,int>>ma;
    for (int i = 1; i <= m ; ++i) {
        char ch;cin>>ch;
        ll u,v;
        if(ch!='?')
        cin>>u>>v;
        queries[i]={ch,min(u,v),max(u,v)};
    }
    if(m==0)return;
    for (int i = 1; i <= m ; ++i) {
        if(queries[i].ch=='?')continue;
        if(queries[i].ch=='+'){
            ma[{queries[i].u,queries[i].v}]={i,i};
        }else{
            update(1,1,m,ma[{queries[i].u,queries[i].v}].first,i-1,ma[{queries[i].u,queries[i].v}].second);
            ma.erase({queries[i].u,queries[i].v});
        }
    }
    for (auto item:ma) {
        update(1,1,m,item.second.first,m,item.second.second);
    }

    dfs(1,1,m);
    for (int i = 1; i <= m ; ++i) {
        if(queries[i].ch=='?')
            cout<<answer[i]<<"\n";
    }
}