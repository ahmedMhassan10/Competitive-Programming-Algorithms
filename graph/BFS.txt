


#include<set>
#include<map>
#include<list>
#include<iomanip>
#include<cmath>
#include<string>
#include<vector>
#include<queue>
#include<stack>
#include<complex>
#include<sstream>
#include<iostream>
#include<fstream>
#include<algorithm>
#include<numeric>
#include<utility>
#include<functional>
#include<stdio.h>
#include<assert.h>
#include<memory.h>
#include<bitset>
using namespace std;

#define all(v)				((v).begin()), ((v).end())
#define sz(v)				((int)((v).size()))
#define clr(v, d)			memset(v, d, sizeof(v))
#define rep(i, v)		for(int i=0;i<sz(v);++i)
#define lp(i, n)		for(int i=0;i<(int)(n);++i)
#define lpi(i, j, n)	for(int i=(j);i<(int)(n);++i)
#define lpd(i, j, n)	for(int i=(j);i>=(int)(n);--i)

typedef long long         ll;
const int OO = (int)1e6;
const double EPS = (1e-7);
int dcmp(double x, double y) {	return fabs(x-y) <= EPS ? 0 : x < y ? -1 : 1;	}

#define pb					push_back
#define MP					make_pair
#define P(x)				cout<<#x<<" = { "<<x<<" }\n"
typedef long double   	  ld;
typedef vector<int>       vi;
typedef vector<double>    vd;
typedef vector< vi >      vvi;
typedef vector< vd >      vvd;
typedef vector<string>    vs;
const ll OO =1e16 , mod = 1e9+7, N =1e5+5 ;
vi par(N,-1);
vector<vector<int>>adjList(N);
vector<ll> len(N, OO);
void BFS(int s) {
    queue<int> q;
    q.push(s), len[s] = 1;
    while(!q.empty()) {
        int cur = q.front(); q.pop();
        fvec(i, adjList[cur])
            if (len[i] == OO){
                q.push(i);
                len[i] =len[cur]+1;
                par[i]=cur;
            }
    }
}


/// https://codeforces.com/contest/131/problem/D problem on get cycles nodes
////////////////////////////////check bipartiteness
/////////////////////////////////////////////////////////////////////////////////////////////////////bipartite or not 


vii adjlist; // num of node    ///imp make vii a(n+1) and adjlist=a;   ///******

bool isBipartite(int V)/////  num of nodes   not start
{
    // vector to store colour of vertex
    // assigning all to -1 i.e. uncoloured
    // colours are either 0 or 1
    // for understanding take 0 as red and 1 as blue
    vector<int> col(V+1, -1);

    // queue for BFS storing {vertex , colour}
    queue<pair<int, int> > q;

    //loop incase graph is not connected
    for (int i = 1; i <= V; i++) {

        //if not coloured
        if (col[i] == -1) {

            //colouring with 0 i.e. red
            q.push({ i, 0 });
            col[i] = 0;

            while (!q.empty()) {
                pair<int, int> p = q.front();
                q.pop();

                //current vertex
                int v = p.first;
                //colour of current vertex
                int c = p.second;

                //traversing vertexes connected to current vertex
                for (int j : adjlist[v]) {

                    //if already coloured with parent vertex color
                    //then bipartite graph is not possible
                    if (col[j] == c)
                        return 0;

                    //if uncoloured
                    if (col[j] == -1) {
                        //colouring with opposite color to that of parent
                        col[j] = (c) ? 0 : 1;
                        q.push({ j, col[j] });
                    }
                }
            }
        }
    }
    //if all vertexes are coloured such that
    //no two connected vertex have same colours
    return 1;
}

////////////////////////////////////////////////////////////////

vector<int> BFSPath(int s, int d, vector<vector<int> > & adjList) {
	vector<int> len(sz(adjList), OO);
	vector<int> par(sz(adjList), -1);
	queue<int> q;
	q.push(s), len[s] = 0;

	int dep = 0, cur = s, sz = 1;
	bool ok = true;

	for ( ; ok &&  !q.empty();	++dep, sz = q.size()) {
		while (ok && sz--) {
			cur = q.front(), q.pop();
			rep(i, adjList[cur]) if (len[adjList[cur][i]] == OO)
			{
				q.push(adjList[cur][i]), len[adjList[cur][i]] = dep+1, par[ adjList[cur][i] ] = cur;

				if(adjList[cur][i] == d)	// we found target no need to continue
				{
					ok = false;
					break;
				}
			}
		}
	}

	vector<int> path;
	while(d != -1) {
		path.push_back(d);
		d = par[d];
	}

	reverse( all(path) );

	return path;
}

// All is done by 1 BFS
// 1-1, 1-m
// m-1 -> Reverse it, start with target and go to sources
// m-m -> Set all start nodes in Q, and find targets

// Testing a graph for bipartiteness

// Edge Split, Vertex Split Tricks



// N=5
// 3	3
// 3 - 6, 6 - 7, 7 - 8
// in(3) = 3, out(3) = 8
// sp(1, 3) = sp( in(1), out(3)) = (1, 8)





int main()
{
#ifndef ONLINE_JUDGE
	freopen("c.in", "rt", stdin);
	//freopen(".txt", "wt", stdout);
#endif

	int n, e;

	cin>>n>>e;

	vector<vector<int> > adj(n);

	lp(i, e) {
		int from, to;
		cin>>from>>to;
		adj[from-1].push_back(to-1);
 	}

	vector<int> p = BFSPath(0, 4, adj);
	rep(i, p)
		cout<<p[i]+1<<" ";

	return 0;
}